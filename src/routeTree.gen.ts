/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PodcasImport } from './routes/podcas'
import { Route as AuthImport } from './routes/Auth'
import { Route as IndexImport } from './routes/index'
import { Route as PodcasPodcasidImport } from './routes/podcas.$podcasid'

// Create/Update Routes

const PodcasRoute = PodcasImport.update({
  id: '/podcas',
  path: '/podcas',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/Auth',
  path: '/Auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PodcasPodcasidRoute = PodcasPodcasidImport.update({
  id: '/$podcasid',
  path: '/$podcasid',
  getParentRoute: () => PodcasRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Auth': {
      id: '/Auth'
      path: '/Auth'
      fullPath: '/Auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/podcas': {
      id: '/podcas'
      path: '/podcas'
      fullPath: '/podcas'
      preLoaderRoute: typeof PodcasImport
      parentRoute: typeof rootRoute
    }
    '/podcas/$podcasid': {
      id: '/podcas/$podcasid'
      path: '/$podcasid'
      fullPath: '/podcas/$podcasid'
      preLoaderRoute: typeof PodcasPodcasidImport
      parentRoute: typeof PodcasImport
    }
  }
}

// Create and export the route tree

interface PodcasRouteChildren {
  PodcasPodcasidRoute: typeof PodcasPodcasidRoute
}

const PodcasRouteChildren: PodcasRouteChildren = {
  PodcasPodcasidRoute: PodcasPodcasidRoute,
}

const PodcasRouteWithChildren =
  PodcasRoute._addFileChildren(PodcasRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Auth': typeof AuthRoute
  '/podcas': typeof PodcasRouteWithChildren
  '/podcas/$podcasid': typeof PodcasPodcasidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Auth': typeof AuthRoute
  '/podcas': typeof PodcasRouteWithChildren
  '/podcas/$podcasid': typeof PodcasPodcasidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Auth': typeof AuthRoute
  '/podcas': typeof PodcasRouteWithChildren
  '/podcas/$podcasid': typeof PodcasPodcasidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/Auth' | '/podcas' | '/podcas/$podcasid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/Auth' | '/podcas' | '/podcas/$podcasid'
  id: '__root__' | '/' | '/Auth' | '/podcas' | '/podcas/$podcasid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  PodcasRoute: typeof PodcasRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  PodcasRoute: PodcasRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Auth",
        "/podcas"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Auth": {
      "filePath": "Auth.tsx"
    },
    "/podcas": {
      "filePath": "podcas.tsx",
      "children": [
        "/podcas/$podcasid"
      ]
    },
    "/podcas/$podcasid": {
      "filePath": "podcas.$podcasid.tsx",
      "parent": "/podcas"
    }
  }
}
ROUTE_MANIFEST_END */
